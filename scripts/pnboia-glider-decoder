#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from pnboiaGliderBinary.csv import GliderDataToCSV

if __name__ == "__main__":
    print("="*30)
    print("RUNNING GLIDER BINARY DATA PROCESSOR\n")

    if len(sys.argv) < 1:
        raise AttributeError("Please, provide the path to the files directory.")
    print(len(sys.argv))
    if sys.argv[2] == "small":
        extension = ".[st]bd"
    elif sys.argv[2] == "big":
        extension = ".[de]bd"

    g = GliderDataToCSV(binary_files_path=sys.argv[1], cache_dir=sys.argv[1], extension=extension)
    # MultiDBD(pattern="ressurgencia/*.[de]bd", cacheDir="ressurgencia/")

    # decode binary data
    # g.bd = MultiDBD(pattern=g.pattern, cacheDir=g.cache_dir)

    # process
    g.engineering_data = g.generate_narrow_dataframe(parameters_type="eng", extension=extension)
    g.engineering_data = g.create_data_type_column(data=g.engineering_data, data_type="engineering")

    g.science_data = g.generate_narrow_dataframe(parameters_type="sci", extension=extension)
    g.science_data = g.create_data_type_column(data=g.science_data, data_type="science")

    if sys.argv[2] == "big":
        g.science_data = g.drop_redundant_parameters(engineering_data=g.engineering_data, science_data=g.science_data)


    g.all_data = g.concat_sci_eng(science_data=g.science_data, engineering_data=g.engineering_data)

    g.all_data = g.round_values(data=g.all_data, round_number=4)

    g.all_data["date_time"] = g.convert_to_datetime(time=g.all_data["time"])
    g.all_data = g.all_data.set_index("date_time").sort_index()

    # save narrow data
    g.save_csv_file(data=g.all_data, file_type="narrow", output_path=sys.argv[1])

    g.all_data_wide = g.pivot_data(data=g.all_data)

    # save wide data
    g.save_csv_file(data=g.all_data_wide, file_type="wide", output_path=sys.argv[1])

    print("\nSUCCESSFULL PROCESSING")
